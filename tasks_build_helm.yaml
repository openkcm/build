version: 3

includes:
  tools:
    taskfile: tasks_tools.yaml
    internal: true

tasks:
  # This is a dummy task that serves as a separator between task namespaces in the 'task -l' output.
  "---":
    desc: "{{.BLD_HLM_SEP}}"
    cmds:
    - cmd: echo "{{.SEP_MSG}}"
      silent: true

  all:
    desc: "  Packages and pushes the helm charts for all components."
    run: once
    aliases:
    - helm
    cmds:
    - task: build
    - task: push

  build:
    desc: "  Packages the helm chart to prepare it for being pushed to the registry."
    run: once
    requires:
      vars:
      - COMPONENTS
    vars:
      HELM_REGISTRY:
        sh: 'PROJECT_ROOT="{{.ROOT_DIR2}}" {{.TASKFILE_DIR2}}/get-registry.sh --helm'
    deps:
    cmds:
    - for:
        var: COMPONENTS
      vars:
        COMPONENT: '{{.ITEM}}'
        HELM_REGISTRY: '{{.HELM_REGISTRY}}'
      task: build-internal

  build-internal:
    desc: "  Packages the helm chart of a specific component to prepare it for being pushed to the registry."
    run: when_changed
    deps:
    - tools:localtmp
    - tools:helm
    requires:
      vars:
      - COMPONENT
      - HELM_REGISTRY
    status:
    - 'test ! -f "{{.ROOT_DIR2}}/charts/{{.COMPONENT}}/Chart.yaml"'
    vars:
      CHART_VERSION:
        sh: "grep '^version:' {{.ROOT_DIR2}}/charts/{{.COMPONENT}}/Chart.yaml | awk '{print $2}'"
    cmds:
      - 'if "{{.HELM}}" pull "oci://{{.HELM_REGISTRY}}/{{.COMPONENT}}" --version "{{.CHART_VERSION}}" >/dev/null 2>&1; then echo "Chart using version {{.CHART_VERSION}} already exist, do not build again.";  else echo "Chart using version {{.CHART_VERSION}} do not exist, continue building."; "{{.HELM}}" package "{{.ROOT_DIR2}}/charts/{{.COMPONENT}}" -d "{{.LOCALTMP}}" --version "{{.CHART_VERSION}}"; fi'
    internal: true

  push:
    desc: "  Push the helm chart to the registry. Requires the chart to have been packaged before."
    run: once
    requires:
      vars:
      - COMPONENTS
    vars:
      HELM_REGISTRY:
        sh: 'PROJECT_ROOT="{{.ROOT_DIR2}}" {{.TASKFILE_DIR2}}/get-registry.sh --helm'
    cmds:
    - for:
        var: COMPONENTS
      vars:
        COMPONENT: '{{.ITEM}}'
        HELM_REGISTRY: '{{.HELM_REGISTRY}}'
      task: push-internal

  push-internal:
    desc: "  Push the helm chart of a specific component to the registry."
    run: when_changed
    deps:
    - tools:helm
    requires:
      vars:
      - COMPONENT
      - HELM_REGISTRY
      - LOCALTMP
    status:
    - 'test ! -f "{{.ROOT_DIR2}}/charts/{{.COMPONENT}}/Chart.yaml"'
    vars:
      CHART_NAME: '{{.COMPONENT}}' # this requires the chart name to be the same as the component name
      CHART_VERSION:
        sh: "grep '^version:' {{.ROOT_DIR2}}/charts/{{.COMPONENT}}/Chart.yaml | awk '{print $2}'"
    cmds:
      - 'if "{{.HELM}}" pull "oci://{{.HELM_REGISTRY}}/{{.COMPONENT}}" --version "{{.CHART_VERSION}}" >/dev/null 2>&1; then echo "Chart using version {{.CHART_VERSION}} already exist, do not push again."; exit 1; else echo "Chart using version {{.CHART_VERSION}} do not exist, continue pushing."; "{{.HELM}}" push "{{.LOCALTMP}}/{{.CHART_NAME}}-{{.CHART_VERSION}}.tgz" "oci://{{.HELM_REGISTRY}}"; rm -f "{{.LOCALTMP}}/{{.CHART_NAME}}-{{.CHART_VERSION}}.tgz"; fi'
    internal: true

