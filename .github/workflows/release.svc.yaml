name: Release

on:
  workflow_call:

permissions:
  contents: read

jobs:
  tag:
    if: |
      github.event_name == 'pull_request' &&
      github.event.pull_request.merged == true &&
      contains(github.event.pull_request.title, 'chore(main)') &&
      contains(github.event.pull_request.title, 'release') &&
      contains(github.event.pull_request.labels.*.name, 'release')
    runs-on: ubuntu-24.04
    steps:
      - name: Generate token from GitHub App
        id: generate-token
        uses: actions/create-github-app-token@67018539274d69449ef7c02e8e71183d1719ab42  # v2.1.4
        with:
          app-id: ${{ secrets.APP_PUSH_TAG_ID }}
          private-key: ${{ secrets.APP_PUSH_TAG_PRIVATE_KEY }}

      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          token: ${{ steps.generate-token.outputs.token }}
          fetch-tags: true
          fetch-depth: 0
          submodules: recursive

      - name: Import GPG key
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
        run: |
          echo "$GPG_PRIVATE_KEY" | gpg --batch --import
          echo "use-agent" >> ~/.gnupg/gpg.conf
          echo "pinentry-mode loopback" >> ~/.gnupg/gpg.conf
          echo "allow-loopback-pinentry" >> ~/.gnupg/gpg-agent.conf
          echo RELOADAGENT | gpg-connect-agent
          git config --global user.name "GitHub CI Bot"
          git config --global user.email "github-ci[bot]@users.noreply.github.com"
          git config --global user.signingkey "${{ secrets.GPG_KEY_ID }}"
          git config --global commit.gpgsign true
          git config --global tag.gpgSign true
          git config --global gpg.program gpg


      - name: Release Please
        id: github_release
        uses: googleapis/release-please-action@c2a5a2bd6a758a0937f1ddb1e8950609867ed15c #v4.3.0
        with:
          release-type: go
          token: ${{ steps.generate-token.outputs.token }}

      - name: Stop if no release was created
        if: ${{ steps.github_release.outputs.release_created != 'true' }}
        run: |
          echo "❌ No release was created — a release PR was likely opened instead."
          echo "ℹ️ Please merge the release PR and re-run the workflow to publish the release."
          exit 1

      - name: Setup
        run: |
          mkdir assets
          echo "repo_name=$(basename "$GITHUB_REPOSITORY")" >> $GITHUB_ENV

      - name: Generate SBOM
        uses: CycloneDX/gh-gomod-generate-sbom@efc74245d6802c8cefd925620515442756c70d8f #v2.0.0
        with:
          version: v1
          args: mod -json -licenses -output ./assets/sbom.json
        env:
          GITHUB_TOKEN: ${{ steps.generate-token.outputs.token }}


      - name: Run Trivy sbom vulnerability scanner
        uses: aquasecurity/trivy-action@b6643a29fecd7f34b3597bc6acb0a98b03d33ff8 #v0.33.1
        with:
          scan-type: 'sbom'
          scan-ref: "./assets/sbom.json"
          format: 'json'
          output: './assets/trivy-sbom-vuln.json'

      - name: Run trivy repository security scanner
        uses: aquasecurity/trivy-action@b6643a29fecd7f34b3597bc6acb0a98b03d33ff8 #v0.33.1
        with:
          token-setup-trivy: ${{ steps.generate-token.outputs.token }}
          scan-type: repository
          format: json
          output: ./assets/trivy-repository-vuln.json
          severity: CRITICAL,HIGH,MEDIUM

      - name: Run tfsec security scanner
        uses: aquasecurity/tfsec-action@b466648d6e39e7c75324f25d83891162a721f2d6 #v1.0.3
        with:
          github_token: ${{ steps.generate-token.outputs.token }}
          format: json

      - name: Upload Release Artifact
        env:
          GITHUB_TOKEN: ${{ steps.generate-token.outputs.token }}
        run: gh release upload ${{ steps.github_release.outputs.tag_name }} ./assets/**

