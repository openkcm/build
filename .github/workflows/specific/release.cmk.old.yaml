name: New Release (Check GHCR images)

on:
  schedule:
    - cron: '*/10 * * * *'   # every 10 minutes
  workflow_dispatch:

jobs:
  build-main:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # needed for caching state
    env:
      ORG: openkcm
      IMAGE_PATH: images
      GHCR_PAT: ${{ secrets.GHCR_PAT }}
      MAIN_IMAGE: cmk
      PLUGIN_IMAGES: "cmk keystore-plugins identity-management-plugins"
    steps:
      - name: Generate token from GitHub App
        id: generate-token
        uses: actions/create-github-app-token@67018539274d69449ef7c02e8e71183d1719ab42  # v2.1.4
        with:
          app-id: ${{ secrets.APP_PUSH_TAG_ID }}
          private-key: ${{ secrets.APP_PUSH_TAG_PRIVATE_KEY }}

      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          token: ${{ steps.generate-token.outputs.token }}
          fetch-tags: true
          fetch-depth: 0
          submodules: recursive

      - name: Checkout build (taskfiles) repo
        run: |
          git clone --branch main --single-branch https://github.com/openkcm/build.git ./hack/common

      - name: Install Task
        uses: arduino/setup-task@b91d5d2c96a56797b48ac1e0e89220bf64044611 #v2.0.0
        with:
          version: 3.x
          repo-token: ${{ steps.generate-token.outputs.token }}

      - name: Run trivy repository security scanner
        uses: aquasecurity/trivy-action@b6643a29fecd7f34b3597bc6acb0a98b03d33ff8 #v0.33.1
        with:
          token-setup-trivy: ${{ steps.generate-token.outputs.token }}
          scan-type: repository
          format: json
          output: trivy-repository-vuln.json
          severity: CRITICAL,HIGH,MEDIUM

      - name: Run tfsec security scanner
        uses: aquasecurity/tfsec-action@b466648d6e39e7c75324f25d83891162a721f2d6 #v1.0.3
        with:
          github_token: ${{ steps.generate-token.outputs.token }}
          format: json

      - name: Set up QEMU
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3.6.0

      - name: Set up Docker Context for Buildx
        id: buildx-context
        run: |
          docker context create builders

      - name: Login to GitHub Container Registry
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3.6.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        timeout-minutes: 5
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1
        with:
          version: latest

      - name: Setup dependencies
        run: sudo apt-get install -y jq

      - name: Restore previous digest state
        id: cache
        uses: actions/cache@v4
        with:
          path: .ghcr_state
          key: ghcr-state

      - name: Prepare state directory
        run: mkdir -p .ghcr_state

      - name: Get latest image digests
        id: digests
        run: |
          set -euo pipefail
          CHANGED=0
          declare -A DIGESTS
          declare -A TAGS
          
          # Include main image in the watched list
          WATCHED_IMAGES="$BASE_IMAGE $PLUGIN_IMAGES"
          
          for image in $WATCHED_IMAGES; do
          FULL_PATH="${ORG}/${IMAGE_PATH}/${image}"
          echo "🔍 Checking ghcr.io/${FULL_PATH}"
          
          TAGS_URL="https://ghcr.io/v2/${FULL_PATH}/tags/list"
          TAG=$(curl -fsSL -H "Authorization: Bearer $GHCR_PAT" "$TAGS_URL" | jq -r '.tags | sort | last')
          if [ -z "$TAG" ] || [ "$TAG" = "null" ]; then
           echo "❌ No tags found for ${FULL_PATH}. Exiting."
           exit 1
          fi
          TAGS[$image]="$TAG"
          
          MANIFEST_URL="https://ghcr.io/v2/${FULL_PATH}/manifests/${TAG}"
          DIGEST=$(curl -fsSLI \
           -H "Authorization: Bearer $GHCR_PAT" \
           -H "Accept: application/vnd.oci.image.manifest.v1+json" \
           "$MANIFEST_URL" | grep -i 'Docker-Content-Digest' | awk '{print $2}' | tr -d '\r')
          
          if [ -z "$DIGEST" ]; then
           echo "❌ Could not retrieve digest for ${FULL_PATH}:${TAG}. Exiting."
           exit 1
          fi
          
          DIGESTS[$image]="$DIGEST"
          
          STATE_FILE=".ghcr_state/${image}.digest"
          LAST_DIGEST=$(cat "$STATE_FILE" 2>/dev/null || echo "")
          echo "Digest: $DIGEST (previous: ${LAST_DIGEST:-<none>})"
          
          if [ "$DIGEST" != "$LAST_DIGEST" ]; then
           echo "$DIGEST" > "$STATE_FILE"
           CHANGED=1
          fi
          done
          
          echo "changed=$CHANGED" >> $GITHUB_OUTPUT
          
          # Export each digest and tag
          for image in $WATCHED_IMAGES; do
            echo "${image}_digest=${DIGESTS[$image]}" >> $GITHUB_OUTPUT
            echo "${image}_tag=${TAGS[$image]}" >> $GITHUB_OUTPUT
          done
          
          # Export main image tag for composite tagging
          echo "main_image_tag=${TAGS[$BASE_IMAGE]}" >> $GITHUB_OUTPUT

      - name: Build composite image
        if: steps.digests.outputs.changed == '1'
        run: |
          MAIN_TAG=${{ steps.digests.outputs.main_image_tag }}
          echo "🚀 Building composite image with main image tag ${MAIN_TAG}..."
          
          docker login ghcr.io -u ${{ github.actor }} -p $GHCR_PAT
          
          BUILD_ARGS=""
          WATCHED_IMAGES="$BASE_IMAGE $PLUGIN_IMAGES"
          for image in "${WATCHED_IMAGES[@]}"; do
            DIGEST_VAR="${image//-/_}_digest"  # convert to variable name
            BUILD_ARGS+=" --build-arg ${image^^}_IMAGE_DIGEST=${!DIGEST_VAR}"
          done
          
          docker build . --file Dockerfile $BUILD_ARGS -t ghcr.io/org/images/cmk-composite:${MAIN_TAG}
          docker push ghcr.io/${ORG}/${IMAGE_PATH}/cmk-composite:${MAIN_TAG}

      - name: Save digest state
        if: always()
        run: |
          echo "🧩 Saving updated digest state..."
          ls -l .ghcr_state/
