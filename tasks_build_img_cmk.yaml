version: 3

includes:
  build:img:
    taskfile: tasks_build_img.yaml
    internal: true
  tools:
    taskfile: tasks_tools.yaml
    internal: true

vars:
  DOCKER_BUILDER_NAME:
    sh: 'echo -n ${DOCKER_BUILDER_NAME:-"openkcm-multiarch-builder"}'

tasks:
  # This is a dummy task that serves as a separator between task namespaces in the 'task -l' output.
  "---":
    desc: "{{.BLD_CMK_IMG_SEP}}"
    cmds:
    - cmd: echo "{{.SEP_MSG}}"
      silent: true

  push:
    desc: "  Push the multi-platform image for CMK including the plugins."
    requires:
      vars:
        - IMAGE_NAME
        - VERSION
    vars:
      IMAGE_BASE:
        sh: 'PROJECT_ROOT="{{.ROOT_DIR2}}" {{.TASKFILE_DIR2}}/get-registry.sh --image'
    cmds:
      - task: build:img:prepare-docker-builder
      - for:
          matrix:
            OS: [ "linux" ]
            ARCH: [ "amd64", "arm64" ]
        vars:
          OS: '{{.ITEM.OS}}'
          ARCH: '{{.ITEM.ARCH}}'
          BASE_IMAGE: '{{.IMAGE_BASE}}/{{.IMAGE_NAME}}'
        task: push-multi-internal
      - task: push-multi-manifest-internal
        vars:
          BASE_IMAGE: '{{.IMAGE_BASE}}/{{.IMAGE_NAME}}'

  push-multi-internal:
    desc: "  Build a the CMK image."
    requires:
      vars:
        - BASE_IMAGE
        - OS
        - ARCH
        - VERSION
        - DOCKER_BUILDER_NAME
        - ORG
        - GITHUB_REPOSITORY_IMAGE_PATH
        - GITHUB_TOKEN
        - GITHUB_ACTOR
        - CMK_CORE_IMAGE
        - CMK_PLUGIN_IMAGES
    cmds:
      - '[[ "{{.OS}}" == "linux" ]] || { echo "The distroless base image does only support linux as operating system."; exit 1; }'
      - 'cat "{{.TASKFILE_DIR2}}/docker/Dockerfile.cmk" > "{{.ROOT_DIR2}}/Dockerfile.tmp"'
      - |
        set -euo pipefail
        
        
        ORG="{{.ORG}}"
        IMAGE_PATH="{{.GITHUB_REPOSITORY_IMAGE_PATH}}"
        MAIN_IMAGE="{{.CMK_CORE_IMAGE}}"
        PLUGIN_IMAGES="{{.CMK_PLUGIN_IMAGES}}"
        GHCR_PAT="{{.GITHUB_TOKEN}}"
        GITHUB_ACTOR="{{.GITHUB_ACTOR}}"
        
        get_ghcr_token() {
          local repo="$1"
          curl -fsSL "https://ghcr.io/token?scope=repository:${repo}:pull" \
            -u "${GITHUB_ACTOR}:${GHCR_PAT}" | jq -r '.token'
        }

        mkdir -p .ghcr_state
        
        WATCHED_IMAGES="$MAIN_IMAGE $PLUGIN_IMAGES"
        declare -A DIGESTS
        declare -A TAGS
        CHANGED=0

        echo "üîç Checking GHCR images for updates..."
        for image in $WATCHED_IMAGES; do
          FULL_PATH="${ORG}/${IMAGE_PATH}/${image}"
          echo "‚û°Ô∏è  Checking ghcr.io/${FULL_PATH}"
        
          TOKEN=$(get_ghcr_token "${FULL_PATH}")

          TAGS_URL="https://ghcr.io/v2/${FULL_PATH}/tags/list"
          TAG=$(curl -s -H "Accept: application/vnd.github+json" "https://api.github.com/repos/${ORG}/${image}/tags" | jq -r '.[].name' | sort -V | tail -n1)

          if [ -z "$TAG" ] || [ "$TAG" = "null" ]; then
            echo "‚ùå No tags found for ${FULL_PATH}"
            exit 1
          fi

          MANIFEST_URL="https://ghcr.io/v2/${FULL_PATH}/manifests/${TAG}-{{.OS}}-{{.ARCH}}"
          DIGEST=$(curl -fsSLI \
            -H "Authorization: Bearer $TOKEN" \
            -H "Accept: application/vnd.oci.image.manifest.v1+json" \
            "$MANIFEST_URL" | grep -i 'Docker-Content-Digest' | awk '{print $2}' | tr -d '\r')

          if [ -z "$DIGEST" ]; then
            echo "‚ùå Could not retrieve digest for ${FULL_PATH}:${TAG}"
            exit 1
          fi

          DIGESTS[$image]="$DIGEST"
          TAGS[$image]="$TAG"

          STATE_FILE=".ghcr_state/${image}.digest"
          LAST_DIGEST=$(cat "$STATE_FILE" 2>/dev/null || echo "")
          if [ "$DIGEST" != "$LAST_DIGEST" ]; then
            echo "üÜï Change detected for ${image}!"
            echo "$DIGEST" > "$STATE_FILE"
            CHANGED=1
          else
            echo "‚úÖ No change for ${image}"
          fi
        done
        
        echo "üîñ All Digests:"
        for k in "${!DIGESTS[@]}"; do
          echo "   ${k} ‚Üí ${DIGESTS[$k]}"
        done
        
        echo "üîñ All Tags:"
        for k in "${!TAGS[@]}"; do
          echo "   ${k} ‚Üí ${TAGS[$k]}"
        done

        MAIN_TAG="${TAGS[$MAIN_IMAGE]}"
        echo "üìå Main image tag: ${MAIN_TAG}"

        COMPOSITE_PATH="https://ghcr.io/v2/${ORG}/${IMAGE_PATH}/dummy-service-2/manifests/${MAIN_TAG}"
        STATUS=$(curl -s -o /dev/null -w "%{http_code}" \
          -H "Authorization: Bearer $TOKEN" \
          -H "Accept: application/vnd.oci.image.manifest.v1+json" \
          "$COMPOSITE_PATH")

        if [ "$STATUS" -eq 200 ]; then
          echo "‚úÖ Composite image ${MAIN_IMAGE} already exists for tag ${MAIN_TAG}. Exiting."
          exit 1
        fi

        if [ "$CHANGED" -eq 0 ]; then
          echo "‚ÑπÔ∏è  No image updates detected. Nothing to build."
          exit 1
        fi


        BUILD_ARGS=()
  
        for image in $WATCHED_IMAGES; do
          VAR_NAME=$(echo "$image" | tr '[:lower:]-' '[:upper:]_')
          VALUE=${DIGESTS[$image]}
          if [ -z "$VALUE" ]; then
            echo "‚ùå Tag missing for image: $image"
            exit 1
          fi
          BUILD_ARGS+=(--build-arg "${VAR_NAME}_IMAGE=${VALUE}-{{.OS}}-{{.ARCH}}")
        done

        docker buildx build --load --builder {{.DOCKER_BUILDER_NAME}} ${BUILD_ARGS[@]} --platform {{.OS}}/{{.ARCH}} -t {{.BASE_IMAGE}}:$MAIN_TAG-{{.OS}}-{{.ARCH}} -f {{.ROOT_DIR2}}/Dockerfile.tmp .
        docker push {{.BASE_IMAGE}}:$MAIN_TAG-{{.OS}}-{{.ARCH}}
        docker manifest create  {{.BASE_IMAGE}}:$MAIN_TAG --amend {{.BASE_IMAGE}}:$MAIN_TAG-{{.OS}}-{{.ARCH}}
        rm -f "{{.ROOT_DIR2}}/Dockerfile.tmp"
    internal: true

  push-multi-manifest-internal:
    desc: "  Push the multi-platform manifest for a single component's image. Individual platform-specific images must have been pushed before."
    requires:
      vars:
        - BASE_IMAGE
        - ORG
        - GITHUB_REPOSITORY_IMAGE_PATH
        - CMK_CORE_IMAGE
    cmd: |
        set -euo pipefail
        
        IMAGE_PATH="{{.GITHUB_REPOSITORY_IMAGE_PATH}}"
        MAIN_IMAGE="{{.CMK_CORE_IMAGE}}"
        
        echo "üîç Checking GHCR images for updates..."
        FULL_PATH="{{.ORG}}/${IMAGE_PATH}/${MAIN_IMAGE}"
        echo "‚û°Ô∏è  Checking ghcr.io/${FULL_PATH}"
      
        TAGS_URL="https://ghcr.io/v2/${FULL_PATH}/tags/list"
        TAG=$(curl -s -H "Accept: application/vnd.github+json" "https://api.github.com/repos/{{.ORG}}/${MAIN_IMAGE}/tags" | jq -r '.[].name' | sort -V | tail -n1)
      
        if [ -z "$TAG" ] || [ "$TAG" = "null" ]; then
          echo "‚ùå No tags found for ${FULL_PATH}"
          exit 1
        fi
        
        docker manifest push {{.BASE_IMAGE}}:$TAG
    internal: true


  all:
    desc: "  Build composite image."
    cmds:
    - task: push
